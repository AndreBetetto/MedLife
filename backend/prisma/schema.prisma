generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  nome        String
  email       String       @unique
  senha       String
  role        Role         @default(user)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  enderecos   Endereco[] //FK para Endereco 1-n
  paciente    Paciente? //FK para Paciente 1-1
  medico      Medico? //FK para medico 1-1
  funcionario Funcionario? //FK para funcionario 1-1
}

enum Role {
  user
  admin
  doctor
  localadmin
}

model Paciente {
  id               Int              @id @default(autoincrement())
  nome             String
  sobrenome        String
  user             User             @relation(fields: [idPerfil], references: [id])
  idPerfil         Int              @unique
  endereco         Endereco         @relation(fields: [codEndereco], references: [id])
  codEndereco      Int
  dataNasc         DateTime         @db.Date
  sexo             Sexo
  cpf              String           @unique
  rg               String           @unique
  fone             String
  estadoCivil      EstadoCivil
  profissao        String
  primeiraConsulta DateTime
  ultimaConsulta   DateTime
  createdAt        DateTime         @default(now())
  frequentaMedicos PacienteMedico[] //FK n-n
  exame            Exame[] //FK n-n
  laudo            ExameLaudo[] //FK n-n
}

model Medico {
  id               Int                 @id @default(autoincrement())
  nome             String
  sobrenome        String
  user             User                @relation(fields: [idPerfil], references: [id])
  idPerfil         Int                 @unique
  endereco         Endereco            @relation(fields: [codEndereco], references: [id])
  codEndereco      Int
  dataNasc         DateTime            @db.Date
  sexo             Sexo
  cpf              String
  rg               String
  fone             String
  estadoCivil      EstadoCivil
  especialidade    String
  crm              String
  primeiraConsulta DateTime
  ultimaConsulta   DateTime
  createdAt        DateTime            @default(now())
  gerenciadoPor    FuncionarioMedico[] //FK n-n
  atendePacientes  PacienteMedico[] //FK n-n
  exame            Exame[] //FK n-n
}

model Funcionario {
  id        Int                 @id @default(autoincrement())
  nome      String
  sobrenome String
  user      User                @relation(fields: [idPerfil], references: [id])
  idPerfil  Int                 @unique
  cpf       String
  fone      String
  gerencia  FuncionarioMedico[]
  createdAt DateTime            @default(now())
  updatedAT DateTime            @updatedAt
}

model FuncionarioMedico {
  id            Int         @id @default(autoincrement())
  idMed         Medico      @relation(fields: [idMedico], references: [id])
  idMedico      Int
  idFun         Funcionario @relation(fields: [id], references: [id])
  idFuncionario Int
}

model PacienteMedico {
  id         Int      @id @default(autoincrement())
  idMed      Medico   @relation(fields: [idMedico], references: [id])
  idMedico   Int
  idPac      Paciente @relation(fields: [id], references: [id])
  idPaciente Int
}

enum EstadoCivil {
  Solteiro
  Casado
  Separado
  Divorciado
  Viuvo
}

enum Sexo {
  fem
  masc
  prefereNaoResponder
  outro
}

model Endereco {
  id          Int        @id @default(autoincrement())
  idFK        User       @relation(fields: [idUser], references: [id])
  idUser      Int //relacao com o campo idUser da tabela User
  cep         BigInt
  tipoCep     String
  subtipocep  String
  uf          String
  cidade      String
  bairro      String
  endereco    String
  complemento String
  codigoIBGE  String
  paciente    Paciente[] //FK para paciente 1-n
  medico      Medico[] //FK para medico 1-n
}

model Convenio {
  id                 Int      @id @default(autoincrement())
  codigoConvenio     Int
  descricaoConvenio  String   @db.VarChar(40)
  vencimentoConvenio DateTime @db.Date
}

model Exame {
  id                Int         @id @default(autoincrement())
  idPac             Paciente    @relation(fields: [idPaciente], references: [id])
  idPaciente        Int
  idMed             Medico      @relation(fields: [idMedico], references: [id])
  idMedico          Int
  descricaoExame    String      @db.VarChar(120)
  grupo             String //Grupo em que o exame se qualifica (otorrino, oftalmo, pediatra...)
  dataDoExame       DateTime    @db.Date
  convenio          Boolean
  duracaoPadrao     DateTime    @db.Time()
  descricaoConvenio String      @db.VarChar(40)
  arquivoLaudo      ExameLaudo? //FK 1-1
}

model ExameLaudo {
  id          Int      @id @default(autoincrement())
  codigo      Exame?   @relation(fields: [idExame], references: [id])
  cpfPac      Paciente @relation(fields: [cpfPaciente], references: [cpf])
  cpfPaciente String
  idExame     Int      @unique
  dataExame   DateTime @db.Date
  nomeArquivo String
}

enum StatusConsulta {
  agendado
  cancelado
  finalizadoSucesso
  faltou
}
